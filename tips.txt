  "Why spend your life developing software unless you care about doing it well?",
  "Turn off the autopilot and take control. Constantly critique and appraise your work.",
  "It's your life. Grab hold of it and make it what you want.",
  "Instead of excuses, provide options. Don't say it can't be done; explain what can be done.",
  "Fix bad designs, wrong decisions, and poor code when you see them.",
  "You can't force change on people. Instead, show them how the future might be and help them participate in creating it.",
  "Don't get so engrossed in the details that you forget to check what's happening around you.",
  "Involve your users in determining the project's real quality requirements.",
  "Make learning a habit.",
  "Don't be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.",
  "Treat English as Just Another Programming Language. Write documents as you would write code: honor the DRY principle, ETC, automation, and so on.",
  "There's no point in having great ideas if you don't communicate them effectively.",
  "Documentation created separately from code is less likely to be correct and up to date.",
  "A thing is well designed if it adapts to the people who use it. For code, that means it must adapt by changing.",
  "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.",
  "If it's easy to reuse, people will. Create an environment that supports reuse.",
  "Design components that are self-contained, independent, and have a single, well-defined purpose.",
  "No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.",
  "Neal Ford says, “Yesterday's Best Practice Becomes Tomorrow's Antipattern.” Choose architectures based on fundamentals, not fashion.",
  "Tracer bullets let you home in on your target by trying things and seeing how close they land.",
  "Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.",
  "Design and code in the language of the problem domain.",
  "Estimate before you start. You'll spot potential problems up front.",
  "Use experience you gain as you implement to refine the project time scales.",
  "Plain text won't become obsolete. It helps leverage your work and simplifies debugging and testing.",
  "Use the shell when graphical user interfaces don't cut it.",
  "An editor is your most important tool. Know how to make it do what you need, quickly and accurately.",
  "Version control is a time machine for your work; you can go back.",
  "It doesn't really matter whether the bug is your fault or someone else's—it is still your problem, and it still needs to be fixed.",
  "This is true for galactic hitchhikers and for developers.",
  "Create a focussed test that reveals the bug before you try fixing it.",
  "Most exceptions tell both what failed and where it failed. If you're lucky you might even get parameter values.",
  "It is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application.",
  "Prove your assumptions in the actual environment—with real data and boundary conditions.",
  "You spend a large part of each day working with text. Why not have the computer do some of it for you?",
  "Software can't be perfect. Protect your code and users from the inevitable errors.",
  "Use contracts to document and verify that code does no more and no less than it claims to do.",
  "A dead program normally does a lot less damage than a crippled one.",
  "If it can't happen, use assertions to ensure that it won't. Assertions validate your assumptions. Use them to protect your code from an uncertain world.",
  "Where possible, the function or object that allocates a resource should be responsible for deallocating it.",
  "Keep the scope of mutable variables and open resources short and easily visible.",
  "Small steps always; check the feedback; and adjust before proceeding.",
  "Only look ahead as far as you can see.",
  "Coupling ties things together, so that it's harder to change just one thing.",
  "Don't get values from an object, transform them, and then stick them back. Make the object do the work.",
  "Try not to have more than one dot when you access something.",
  "It's like adding an extra parameter to every method.",
  "…but only if you really, really want it to be global.",
  "All programs transform data, converting an input into an output. Start designing using transformations.",
  "Don't hang on to data within a function or module. Take one down and pass it around.",
  "Consider alternatives that better fit your needs, such as interfaces, delegation, or mixins",
  "Interfaces make polymorphism explicit without the coupling introduced by inheritance.",
  "Don't inherit from services: contain them.",
  "Mixins add functionality to classes without the inheritance tax. Combine with interfaces for painless polymorphism.",
  "When code relies on values that may change after the application has gone live, keep those values external to the app. When you application will run in different environments, and potentially for different customers, keep the environment and customer specific values outside the app.",
  "Exploit concurrency in your user's workflow.",
  "Shared state opens a large can of worms that can often only be fixed by rebooting.",
  "Variations in timing and context can expose concurrency bugs, but in inconsistent and irreproducible ways.",
  "Use Actors to manage concurrent state without explicit synchronization.",
  "Use blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants.",
  "When it feels like your code is pushing back, it's really your subconscious trying to tell you something's wrong.",
  "Rely only on reliable things. Beware of accidental complexity, and don't confuse a happy coincidence with a purposeful plan.",
  "Get a feel for how long things are likely to take before you write code.",
  "Mathematical analysis of algorithms doesn't tell you everything. Try timing your code in its target environment.",
  "Just as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.",
  "A test is a perspective into your code, and gives you feedback about its design, api, and coupling.",
  "Use its feedback to guide what you do.",
  "Build small pieces of end-to-end functionality, learning about the problem as you go.",
  "Start thinking about testing before you write a line of code.",
  "Test ruthlessly. Don't make your users find bugs for you.",
  "Property-based tests will try things you never thought to try, and exercise your code in ways is wasn't meant to be used.",
  "Complex code creates a breeding ground for bugs and opportunities for attackers to exploit.",
  "Attackers deploy exploits as quick as they can, you have to be quicker.",
  "Name to express your intent to readers, and rename as soon as that intent shifts.",
  "They might know a general direction, but they won't know the twists and turns.",
  "Software development is an act of co-creation between users and programmers.",
  "Understanding requirements requires exploration and feedback, so the consequences of decisions can be used to refine the initial ideas.",
  "It's the best way to gain insight into how the system will really be used.",
  "Don't hardcode policy into a system; instead express it as metadata used by the system.",
  "Create and maintain a single source of all the specific terms and vocabulary for a project.",
  "When faced with an impossible problem, identify the real constraints. Ask yourself: “Does it have to be done this way? Does it have to be done at all?”",
  "Programming can be difficult and demanding. Take a friend with you.",
  "Agile is an adjective: it's how you do something.",
  "Teams should be small and stable, where everyone trusts each other and depends on each other.",
  "If you don't schedule it, it's not going to happen. Schedule reflection, experimentation, learning and skills improvement.",
  "Organize Around Functionality, Not Job Functions. Don't separate UI/UX designers from coders, frontend from backend, testers from data modelers, design from deployment. Build teams so you can build code end-to-end, incrementally and iteratively.",
  "Don't adopt a development method or technique just because other companies are doing it. Adopt what works for your team, in your context.",
  "Don't wait weeks or months to deliver just because your process demands it.",
  "Use commits or pushes to trigger builds, tests, releases. Use a version control tag to deploy to production.",
  "Tests that run with every build are much more effective than test plans that sit on a shelf.",
  "'Nuff said.",
  "Introduce bugs on purpose in a separate copy of the source to verify that testing will catch them.",
  "Identify and test significant program states. Testing just lines of code isn't enough.",
  "Once a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on.",
  "A computer will execute the same instructions, in the same order, time after time.",
  "Develop solutions that produce business value for your users and delight them every day.",
  "Artisans of an earlier age were proud to sign their work. You should be, too.",
  "Failure is inevitable. Make sure no one will suffer because of it.",
  "Because you risk becoming one, too.",
  "Enjoy this amazing life we have, and do great things."